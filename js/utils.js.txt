// js/utils.js - Helper functions for UMHC Finance System

const Utils = {
    // Currency formatting
    formatCurrency: (amount, showSymbol = true) => {
        const formatted = new Intl.NumberFormat('en-GB', {
            style: showSymbol ? 'currency' : 'decimal',
            currency: 'GBP',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(Math.abs(amount));
        
        return amount < 0 ? `-${formatted}` : formatted;
    },
    
    // Date formatting
    formatDate: (date, format = 'short') => {
        const dateObj = new Date(date);
        
        switch (format) {
            case 'short':
                return dateObj.toLocaleDateString('en-GB');
            case 'long':
                return dateObj.toLocaleDateString('en-GB', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            case 'month-year':
                return dateObj.toLocaleDateString('en-GB', {
                    year: 'numeric',
                    month: 'long'
                });
            default:
                return dateObj.toLocaleDateString('en-GB');
        }
    },
    
    // Number formatting
    formatNumber: (number, decimals = 0) => {
        return new Intl.NumberFormat('en-GB', {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(number);
    },
    
    // Percentage formatting
    formatPercentage: (value, decimals = 1) => {
        return `${(value * 100).toFixed(decimals)}%`;
    },
    
    // CSV parsing utility
    parseCSV: (csvText) => {
        const lines = csvText.trim().split('\n');
        if (lines.length < 2) return [];
        
        const headers = lines[0].split(',').map(header => header.trim());
        const data = [];
        
        for (let i = 1; i < lines.length; i++) {
            const values = lines[i].split(',').map(value => value.trim());
            if (values.length === headers.length && values.some(v => v !== '')) {
                const row = {};
                headers.forEach((header, index) => {
                    row[header] = values[index];
                });
                data.push(row);
            }
        }
        
        return data;
    },
    
    // Local storage helpers
    storage: {
        set: (key, value) => {
            try {
                localStorage.setItem(key, JSON.stringify(value));
                return true;
            } catch (error) {
                Utils.log('error', 'Failed to save to localStorage', error);
                return false;
            }
        },
        
        get: (key, defaultValue = null) => {
            try {
                const item = localStorage.getItem(key);
                return item ? JSON.parse(item) : defaultValue;
            } catch (error) {
                Utils.log('error', 'Failed to read from localStorage', error);
                return defaultValue;
            }
        },
        
        remove: (key) => {
            try {
                localStorage.removeItem(key);
                return true;
            } catch (error) {
                Utils.log('error', 'Failed to remove from localStorage', error);
                return false;
            }
        },
        
        clear: () => {
            try {
                localStorage.clear();
                return true;
            } catch (error) {
                Utils.log('error', 'Failed to clear localStorage', error);
                return false;
            }
        }
    },
    
    // Logging utility
    log: (level, message, data = null) => {
        if (!CONFIG || !CONFIG.DEBUG || !CONFIG.DEBUG.ENABLED) return;
        
        const levels = ['debug', 'info', 'warn', 'error'];
        const configLevel = CONFIG.DEBUG.LOG_LEVEL || 'info';
        const currentLevelIndex = levels.indexOf(configLevel);
        const messageLevelIndex = levels.indexOf(level);
        
        if (messageLevelIndex >= currentLevelIndex) {
            const timestamp = new Date().toISOString();
            const prefix = `[UMHC Finance ${timestamp}]`;
            
            if (data) {
                console[level](prefix, message, data);
            } else {
                console[level](prefix, message);
            }
        }
    },
    
    // DOM helpers
    dom: {
        // Create element with attributes and content
        create: (tag, attributes = {}, content = '') => {
            const element = document.createElement(tag);
            
            Object.keys(attributes).forEach(key => {
                if (key === 'className') {
                    element.className = attributes[key];
                } else if (key === 'innerHTML') {
                    element.innerHTML = attributes[key];
                } else {
                    element.setAttribute(key, attributes[key]);
                }
            });
            
            if (content) {
                element.textContent = content;
            }
            
            return element;
        },
        
        // Show/hide elements
        show: (element) => {
            if (element) element.style.display = '';
        },
        
        hide: (element) => {
            if (element) element.style.display = 'none';
        },
        
        // Toggle element visibility
        toggle: (element) => {
            if (element) {
                element.style.display = element.style.display === 'none' ? '' : 'none';
            }
        }
    },
    
    // Date range helpers
    dateRange: {
        today: () => {
            const today = new Date();
            return {
                start: new Date(today.getFullYear(), today.getMonth(), today.getDate()),
                end: new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1)
            };
        },
        
        thisMonth: () => {
            const today = new Date();
            return {
                start: new Date(today.getFullYear(), today.getMonth(), 1),
                end: new Date(today.getFullYear(), today.getMonth() + 1, 1)
            };
        },
        
        thisQuarter: () => {
            const today = new Date();
            const quarter = Math.floor(today.getMonth() / 3);
            return {
                start: new Date(today.getFullYear(), quarter * 3, 1),
                end: new Date(today.getFullYear(), (quarter + 1) * 3, 1)
            };
        },
        
        thisYear: () => {
            const today = new Date();
            return {
                start: new Date(today.getFullYear(), 0, 1),
                end: new Date(today.getFullYear() + 1, 0, 1)
            };
        }
    },
    
    // URL helpers
    url: {
        getParams: () => {
            const params = new URLSearchParams(window.location.search);
            const result = {};
            for (const [key, value] of params) {
                result[key] = value;
            }
            return result;
        },
        
        setParam: (key, value) => {
            const url = new URL(window.location);
            url.searchParams.set(key, value);
            window.history.replaceState({}, '', url);
        },
        
        removeParam: (key) => {
            const url = new URL(window.location);
            url.searchParams.delete(key);
            window.history.replaceState({}, '', url);
        }
    },
    
    // Validation helpers
    validate: {
        email: (email) => {
            const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return regex.test(email);
        },
        
        currency: (value) => {
            const regex = /^-?\d+(\.\d{1,2})?$/;
            return regex.test(value.toString());
        },
        
        date: (dateString) => {
            const date = new Date(dateString);
            return date instanceof Date && !isNaN(date);
        },
        
        required: (value) => {
            return value !== null && value !== undefined && value.toString().trim() !== '';
        }
    },
    
    // Debounce function for search inputs
    debounce: (func, wait) => {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },
    
    // Generate unique IDs
    generateId: () => {
        return 'umhc_' + Math.random().toString(36).substr(2, 9);
    },
    
    // Deep clone objects
    deepClone: (obj) => {
        return JSON.parse(JSON.stringify(obj));
    },
    
    // Calculate transaction totals
    calculateTotals: (transactions) => {
        let income = 0;
        let expenses = 0;
        
        transactions.forEach(transaction => {
            const amount = parseFloat(transaction.Amount) || 0;
            if (amount > 0) {
                income += amount;
            } else {
                expenses += Math.abs(amount);
            }
        });
        
        return {
            income,
            expenses,
            balance: income - expenses
        };
    }
};

// Export Utils for use in other files
window.Utils = Utils;

// Initialize logging
Utils.log('info', 'Utils module loaded', {
    functions: Object.keys(Utils).length,
    localStorage: typeof(Storage) !== "undefined"
});